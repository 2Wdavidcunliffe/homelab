---
  - name: K8s-Common
    hosts: all
    become: yes
    vars:
      k8s_version: 1.24.0-00

  # Update apt cache and install required packages
  - name: Update apt cache and install required packages
        apt:
      name: "{{ item }}"
      state: present
      update_cache: yes
      version: "{{ k8s_version }}"-00
    with_items:
      - ca-certificates
      - gnupg
      - lsb-release
    become: yes

  # Add Docker’s official GPG key
  - name: Add Docker’s official GPG key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
    become: yes

  # Add Docker repository
  - name: Add Docker repository
    apt_repository:
      repo: deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu focal stable
      state: present
    become: yes

  # Update apt cache
  - name: Update apt cache
    apt:
      update_cache: yes
    become: yes

  # Enable modules for containerd
  - name: Enable modules for containerd
    modprobe:
      name: "{{ item }}"
      state: present
    with_items:
      - overlay
      - br_netfilter
    become: yes

  # Create configuration file to load modules at boot
  - name: Create configuration file to load modules at boot
    copy:
      dest: /etc/modules-load.d/containerd.conf
      content: |
        overlay
        br_netfilter
    become: yes

  # Set system configuration for Kubernetes networking
  - name: Set system configuration for Kubernetes networking
    sysctl:
      name: "{{ item.key }}"
      value: "{{ item.value }}"
      sysctl_set: yes
      state: present
      reload: yes
    with_dict:
      net.bridge.bridge-nf-call-iptables: 1
      net.bridge.bridge-nf-call-ip6tables: 1
      net.ipv4.ip_forward: 1
    become: yes

  # Apply new sysctl settings
  - name: Apply new sysctl settings
    command: sysctl --system
    become: yes

  # Install containerd
  - name: Install containerd
    apt:
      name: containerd.io
      state: present
      update_cache: yes
    become: yes

  # Create containerd configuration file directory
  - name: Create containerd configuration file directory
    file:
      path: /etc/containerd
      state: directory
    become: yes

  # Generate containerd configuration file from default config
  - name: Generate containerd configuration file from default config
    command: containerd config default > /etc/containerd/config.toml
    register: containerd_config
    become: yes

  # Set containerd configuration file
  - name: Set containerd configuration file
    lineinfile:
      path: /etc/containerd/config.toml
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    with_items:
      - { regexp: '^#.*\(systemd_cgroup =\).*', line: '\1 true' }
      - { regexp: '^#.*\(cgroup =\).*', line: '\1 "/systemd/system.slice"' }
    become: yes

  # Disable swap
  - name: Disable swap
    command: swapoff -a
    become: yes

  # Disable swap in fstab
  - name: Disable swap in fstab
    lineinfile:
      path: /etc/fstab
      regexp: '^/swap.img'
      line: '#/swap.img'
    become: yes

  # Download and Install Kubernetes GPG key
  - name: Download and Install Kubernetes GPG key
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present
    become: yes

  # Add Kubernetes repository
  - name: Add Kubernetes repository
    apt_repository:
      repo: deb http://apt.kubernetes.io/ kubernetes-focal main
      state: present
    become: yes

  # Install Kubernetes packages and set to version  "{{ k8s_version }}"
  - name: Install Kubernetes packages and set to version  "{{ k8s_version }}"
    apt:
      name: "{{ item }}"
      state: present
      update_cache: yes
      version: "{{ k8s_version }}"-00
    with_items:
      - kubelet
      - kubeadm
      - kubectl
    become: yes

  # Lock Kubernetes packages
  - name: Lock Kubernetes packages
    apt:
      name: "{{ item }}"
      state: held
    with_items:
      - kubelet
      - kubeadm
      - kubectl
    become: yes

  # Restart containerd
  - name: Restart containerd
    service:
      name: containerd
      state: restarted
      enabled: yes
    become: yes

  # Enable and start kubelet
  - name: Enable and start kubelet
    service:
      name: kubelet
      state: restarted
      enabled: yes
    become: yes

  # If the node is a master node then initialize the cluster
  - name: Initialize the cluster
    command: kubeadm init --pod-network-cidr=10.0.0.0/16 --kubernetes-version={{ k8s_version }}
    register: kubeadm_init
    when: groups['k8s-control-plane'] | intersect(groups['k8s-cluster']) | length > 0

  # If the node is a master node then copy the kubeconfig to the user dcunliffe
  - name: Copy the kubeconfig to the user dcunliffe
    copy:
      dest: /home/dcunliffe/.kube/config
      content: "{{ kubeadm_init.stdout_lines[6] }}"
      owner: dcunliffe
      group: dcunliffe
      mode: 0600
    when: groups['k8s-control-plane'] | intersect(groups['k8s-cluster']) | length > 0

  # If the node is a master node then copy the kubeconfig to the user root
  - name: Copy the kubeconfig to the user root
    copy:
      dest: /root/.kube/config
      content: "{{ kubeadm_init.stdout_lines[6] }}"
      owner: root
      group: root
      mode: 0600
    when: groups['k8s-control-plane'] | intersect(groups['k8s-cluster']) | length > 0

  # # If the node is a master node then apply the flannel network
  # - name: Apply the flannel network
  #   command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
  #   when: groups['k8s-control-plane'] | intersect(groups['k8s-cluster']) | length > 0

   # If the node is a master node then apply the Calico network and wait for the pods to be ready
  - name: Apply the Calico network and wait for the pods to be ready
    command: kubectl apply -f https://docs.projectcalico.org/v3.8/manifests/calico.yaml && kubectl wait --for=condition=Ready pod -l k8s-app=calico-node -n kube-system --timeout=120s
    when: groups['k8s-control-plane'] | intersect(groups['k8s-cluster']) | length > 0
 
  # If the node is a master node then save the join command to a file
  - name: Save the join command to a file
    copy:
      dest: /tmp/kubeadm_join
      content: "{{ kubeadm_init.stdout_lines[5] }}"
    when: groups['k8s-control-plane'] | intersect(groups['k8s-cluster']) | length > 0

  # If the node is a worker node then join the cluster using the join command
  - name: Join the cluster using the join command
    command: "{{ lookup('file', '/tmp/kubeadm_join') }}"
    when: groups['k8s-control-plane'] | intersect(groups['k8s-cluster']) | length == 0

  # If the node is a master node then copy the kubeconfig to the local machine
  - name: Copy the kubeconfig to the local machine
    fetch:
      src: /etc/kubernetes/admin.conf
      dest: /tmp/admin.conf
      flat: yes
    when: groups['k8s-control-plane'] | intersect(groups['k8s-cluster']) | length > 0
